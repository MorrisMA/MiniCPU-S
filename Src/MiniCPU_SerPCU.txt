///////////////////////////////////////////////////////////////////////////////
//
//  Copyright 2012 by Michael A. Morris, dba M. A. Morris & Associates
//
//  All rights reserved. The source code contained herein is publicly released
//  under the terms and conditions of the GNU Lesser Public License. No part of
//  this source code may be reproduced or transmitted in any form or by any
//  means, electronic or mechanical, including photocopying, recording, or any
//  information storage and retrieval system in violation of the license under
//  which the source code is released.
//
//  The souce code contained herein is free; it may be redistributed and/or 
//  modified in accordance with the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either version 2.1 of
//  the GNU Lesser General Public License, or any later version.
//
//  The souce code contained herein is freely released WITHOUT ANY WARRANTY;
//  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
//  PARTICULAR PURPOSE. (Refer to the GNU Lesser General Public License for
//  more details.)
//
//  A copy of the GNU Lesser General Public License should have been received
//  along with the source code contained herein; if not, a copy can be obtained
//  by writing to:
//
//  Free Software Foundation, Inc.
//  51 Franklin Street, Fifth Floor
//  Boston, MA  02110-1301 USA
//
//  Further, no use of this source code is permitted in any form or means
//  without inclusion of this banner prominently in any derived works. 
//
//  Michael A. Morris
//  Huntsville, AL
//
///////////////////////////////////////////////////////////////////////////////

localparam pIP_Out     = 0;     // Output IP:       PCU_DO  <= IP;
localparam pIP_In      = 1;     // Load IP:         IP      <= PCU_DI;
localparam pIP_Plus_1  = 2;     // Increment IP:    IP      <= IP + PCU_DI;
localparam pIP_Plus_Op = 3;     // Computer target: IP      <= IP + Op;

localparam pW_Out      = 0;     // Output W:        PCU_DO  <= W;
localparam pW_In       = 1;     // Load W:          W       <= ALU_DI;
localparam pW_Plus_1   = 2;     // Increment W:     W       <= W +  PCU_DI;
localparam pW_Minus_2  = 3;     // Decrement W:     W       <= W + ~PCU_DI;

localparam pOp_Out     = 0;     // Output Op:       PCU_DO  <= Op;
localparam pOp_In      = 1;     // Input Op:        Op      <= PCU_DI;
localparam pOp_Plus_A  = 2;     // Non-Local Var:   Op      <= Op + ALU_DI;
localparam pOp_Plus_W  = 3;     // Local Variable:  Op      <= Op + W;
